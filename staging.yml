version: '3'
services:
  celery-beat: &base
    build:
      context: .
      dockerfile: ./Dockerfile.prod
      args:
        DEBIAN_FRONTEND: noninteractive
        BASE_DIR: ${BASE_DIR}
    volumes:
      - ./app:${BASE_DIR}:rw
      - ~/***-media/:/media/:rw
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
    healthcheck:
      test: celery -A ***.celery status
      interval: 10s
      timeout: 3s
      retries: 10
    container_name: celery-beat
    command: ./entrypoints/celery-beat.sh
    restart: always
    networks:
      - ***
    depends_on:
      - rabbitmq

  celery-worker:
    <<: *base
    container_name: celery-worker
    command: ./entrypoints/celery-worker.sh
    deploy:
      resources:
        limits:
          cpus: ${WORKER_CPUS}
          memory: ${WORKER_MEMORY}

  app:
    <<: *base
    container_name: app
    command: bash ./entrypoints/app.sh
    restart: always

  rabbitmq:
    image: rabbitmq:management
    restart: always
    env_file:
      - .env
    logging:
      driver: json-file
      options:
        max-size: 20m
    deploy:
      resources:
        limits:
          cpus: ${RABBITMQ_CPUS}
          memory: ${RABBITMQ_MEMORY}
    networks:
      - ***
    container_name: rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 3s
      retries: 5

  mysql:
    image: mysql/mysql-server:8.0
    restart: always
    env_file:
      - .env
    volumes:
      - ***-mysql:/var/lib/mysql
    networks:
      - ***
    container_name: mysql
    deploy:
      resources:
        limits:
          cpus: ${MYSQL_CPUS}
          memory: ${MYSQL_MEMORY}

  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - 127.0.0.1:8080:80
    volumes:
      - ./app/static/:/static/:ro
      - ~/***-media/:/media/:ro
    command: ["nginx", "-g", "daemon off;"]
    restart: always
    depends_on:
      - app
    networks:
      - ***

networks:
  ***:
    external: true

volumes:
  ***-mysql:
    driver: local
